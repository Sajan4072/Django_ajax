1...after creating a user model to see if its working properly or not you can 
create super user and go in admmin panel and see or you can use tools such as sqllite viewer


2..to be able to see model users in admin panel you should register that model in admin.py
from .models import user
@admin.register(User)
....
...
etc

3.using the models, we can create modelforms(in forms.py)that can be rendered and shown to user

4....if we need bootstrap wala form we need to set widgets add classes etc (CK)
??


5..since our model form is ready we need to render it in views

6.. so create template/home.hmtl for displaying 
7.. write the view since we need blank form so 
form=StudentRegistration()  //creating an object 
{'form':form} this is context

8.in html, inside body inside form tag csrf and {form.as_p}

9..styling the form with bootstrap by linking in head 

10. create a div with class (and bootstrap such as mt-5,text-center,alert alert-danger etc can be given inside class itself)

11...form ko fields ma widgets ko through dekhi classes lagaunu parcha 
i.e in forms.py

12.. now data retrieval ko kam on other side since theres no data we insert using admin( admin dekhi data insert garepachi migration garnu parcha ki nai ?) 

13..<thead> <tr> </tr> <tr> </tr></thead>

14..to retrieve data in view datbase dekhi data tanne ho ani context ma pass garne 

note eutai return ma 2 ta context ni pass garna milcha eg
form=StudentRegistration()
    stud=User.objects.all() 
    return render(request,'ajaxapp/home.html',{'form':form,'stu':stud})

15.. aba html ma loop chalaune to render data in <tbody>
ie 
<tbody>
                        {%for st in stu%}
                        <tr>

                            <td>{{st.id}}</td>
                            <td>{{st.name}}</td>
                            <td>{{st.email}}</td>
                            <td>{{st.password}}</td>
                        </tr>
                        {% endfor %}
                    </tbody>



16... using ajax to update the inputed data in data retrieval field
logic of it 
the data inserted in the form is to be captured send to server
then server will isert it to DB and the server will send us somedata as response..

17..data capturing logic 
when save button is pressed look the id of that input type and target it in script 

and to capture=>
let nm = $("#nameid").val();
this is cuz in forms.py using widgets we have done something like 
'name':forms.TextInput(attrs={'class':'form-control','id':'nameid'}),


18..after grabbing create an object
and
call ajax
and

the request(ie the data) will go to the following url of ajax call via post/
and the server(which will store it in DB) will give a response(data) which we will console.log()


19..creating a view to store data in DB 
in views once you validate the request 
,create a User object where name goes to name column and email goes to email column
and save and 
return jsonResponse



20..csrf protection in save_data view 
--if you view source ,there is hidde input with name and value that generates
csrf token this should be sent to server so do that in script
that will be sent with the request and will utimately be used in views


21..





