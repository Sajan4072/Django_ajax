1...
after creating a user model to see if its working properly or not you can 
create super user and go in admmin panel and see or you can use tools such as sqllite viewer


2..
to be able to see model users in admin panel you should register that model in admin.py
from .models import user
@admin.register(User)
class UserAdmin(admin.ModelAdmin):
    list_display=('id','name','email','password')



3...
using the models, we can create modelforms(in forms.py)that can be rendered and shown to user


class StudentRegistration(forms.ModelForm):
    class Meta:
        model=User
        fields=['name','email','password']




4.... ##just a query
if we need bootstrap wala form we need to set widgets add classes etc (CK)
??


5..
since our model form is ready we need to render it in views
6.. so create template/home.hmtl for displaying 



7.. 

write the view since we need blank form and pass it as context 
def home(request):
    #creating an empty form
    
    form=StudentRegistration()
    
    return render(request,'ajaxapp/home.html',{'form':form})



8...
in html, inside body inside 
form tag csrf i.e 
<form action ="" method="post">
{csrf}
{form.as_p}
</form>





9..styling the form with bootstrap by linking in head 
using {% load static %} at first and
<link rel="stylesheet" href="{% static 'ajaxapp/css/bootstrap.css' %}" />
and same for scripts 


    <script src="{% static 'ajaxapp/js/jquery.js' %}"></script>
    <script src="{% static 'ajaxapp/js/popper.js' %}"></script>
    <script src="{% static 'ajaxapp/js/bootstrap.js' %}"></script>





10. create a div with class (and bootstrap such as mt-5,text-center,alert alert-danger etc can be given inside class itself)
to make it look applealing 
but forms ko fileds such as name,email,password wont appear appealing so we use widgets


11...form ko fields ma widgets ko through dekhi classes lagaunu parcha 
i.e in forms.py
        widgets={
            'name':forms.TextInput(attrs={'class':'form-control','id':'nameid'}),
            'email':forms.EmailInput(attrs={'class':'form-control','id':'emailid'}),
            'password':forms.TextInput(attrs={'class':'form-control','id':'passwordid'})
        }






12.. now data retrieval ko kam on other side since theres no data 
we insert using admin( admin dekhi data insert garepachi migration garnu parcha ki nai ?) 



13..
create a table head #since table body afai populate hunu parcha 
 <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Password</th>
                            <th scope="col">Action</th>

                        </tr>
                    </thead>





14..to retrieve data in view datbase dekhi data tanne ho ani context ma pass garne 

note eutai return ma 2 ta context ni pass garna milcha eg
form=StudentRegistration()
    stud=User.objects.all() 
    return render(request,'ajaxapp/home.html',{'form':form,'stu':stud})





15.. aba html ma loop chalaune to render data in <tbody>
ie 
<tbody>
                        {%for st in stu%}
                        <tr>

                            <td>{{st.id}}</td>
                            <td>{{st.name}}</td>
                            <td>{{st.email}}</td>
                            <td>{{st.password}}</td>
			    <td>
                                <input type="button" data-sid="{{st.id}}" class="btn btn-warning btn-sm" value="Edit" />    #since edit and delete is also in table body
                                <input type="button" data-sid="{{st.id}}" class="btn btn-danger btn-sm" value="Delete" />

                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>





16... using ajax to update the inputed data in data retrieval field
so create a separate html file called ajax.html which will contain all the ajax scripts
and just include it in home.html

{% include "ajaxapp/ajax.html" %}


==>logic of it 
	the data inserted in the form is to be captured send to server
	then server will isert it to DB and the server will send us somedata as response..


17..data capturing logic 
when save button is pressed look the id of that input type i.e
 
<input type="button" class="btn btn-success" id="btnsave" value="save" />
so id is btnsave

and target it in script 
i.e

 $("#btnsave").click(function() {
        console.log("save button clicked");
        let nm = $("#nameid").val();
        let em = $("#emailid").val();
        let pw = $("#passwordid").val();
	        let csr = $("input[name=csrfmiddlewaretoken]").val();
        if (nm == "") {
            console.log("please enter name");
        } else if (em == "") {
            console.log("please enter email");
        } else if (pw == "") {
            commsole.log("please enter password");
        } else {
            // console.log(nm);
            // console.log(em);
            // console.log(pw);
            mydata = {
                name: nm,
                email: em,
                password: pw,
                csrfmiddlewaretoken: csr

            };





and to capture=>
let nm = $("#nameid").val();
this is cuz in forms.py using widgets we have done something like 
'name':forms.TextInput(attrs={'class':'form-control','id':'nameid'}),






18..after grabbing create an object
and
call ajax


$.ajax({
                url: "{% url 'save' %}",
                method: "POST",
                data: mydata, //can send them by making them json string as well
                //yo tala ko part chahi response hola
                success: function(data) {
                    // console.log(data)
                    if (data.status == "saved") {
                        console.log("Form submitted successfully");
                        //if submitted then
                        // console.log(data.student_data);
                        x = data.student_data;
                        //impr part
                        for (i = 0; i < x.length; i++) {
                            output += "<tr><td>" + x[i].id + "</td><td>" + x[i].name + "</td><td>" + x[i].email + "</td><td" +
                                x[i].password + "</td><td>   <
                            input type = 'button'
                            data - sid = "+ {{st.id}}+"
                            class = 'btn btn-warning btn-sm'
                            value = 'Edit' / > "   
                        }
                        $("form")[0].reset(); //[0] since theres only 1 form 
                    }
                    if (data.status == 0) {
                        console.log("unable to save");
                    }
                }
            })
        }
    });


the request(ie the data) will go to the following url of ajax call via post/
and the server(which will store it in DB) will give a response(data) if it is success which we will console.log()







19..creating a view to store data in DB 

in views once you validate the request 
,create a User object where name goes to name column and email goes to email column
and save and 
return jsonResponse

ie

# @csrf_exempt
def save_data(request):
    if request.method=="POST":
        form=StudentRegistration(request.POST)
        if form.is_valid():
            name=request.POST['name']
            email=request.POST['email']
            password=request.POST['password']
            usr=User(name=name, email=email ,password=password)
            usr.save()

            #after it is saved in DB the server shall send it back to ajax call so it can be rendered without refreshing
            stud=User.objects.values()
            student_data=list(stud)


            return JsonResponse({'status':'saved','student_data':student_data}) #this is also an api endpoint 
        else:
            return JsonResponse({'status':0})



20..csrf protection in save_data view 
--if you view source ,there is hidde input with name and value that generates
csrf token this should be sent to server so do that in script
that will be sent with the request and will utimately be used in views




21..form fields are not empty after submitting so 
1)its easy reset garda vaihalcha the 2nd problem is the data that was inserted
do not appear unless refreshed so fix that pani 


22.mathi ko above 2 problems are to be fixed if our data is saved successfully 
 23.. to reset 
$("form")[0].reset();


24..to show the inserted data without refreshing 
1st server dekhi data magaune in views after save
by
stud=User.objects.values()
student_data=list(stud)

and return in Jsonresponse

20,21,22,23,24,25  is same thing as 18





25..now use it in ajax.html
console.log(data.student_data);
and
using loop update 





26..
after writting the output we targeted the tbody id and populated it with the output

           $.ajax({
                url: "{% url 'save' %}",
                method: "POST",
                data: mydata, //can send them by making them json string as well
                //yo tala ko part chahi response hola
                success: function(data) {
                    // console.log(data)
                    if (data.status == "saved") {
                        console.log("Form submitted successfully");
                        //if submitted then
                        // console.log(data.student_data);
                        x = data.student_data;
                        //impr part
                        for (i = 0; i < x.length; i++) {
                            output += "<tr><td>" + x[i].id + "</td><td>" + x[i].name + "</td><td>" + x[i].email + "</td><td" +
                                x[i].password + "</td><td>   <
                            input type = 'button'

                            class = 'btn btn-warning btn-sm'
                            value = 'Edit'
                            data - sid = "+ x[i].id+" / >
                                <
                                input type = 'button'
                            class = 'btn btn-danger btn-sm'
                            value = 'Delete'
                            data - sid = "+x[i].id+ " / > "   
                        }
                        $("tbody").html(output);
                        $("form")[0].reset(); //[0] since theres only 1 form 
                    }
                    if (data.status == 0) {
                        console.log("unable to save");
                    }
                }
            })
        }
    });





27...



